---

apiVersion: batch/v1
kind: CronJob
metadata:
  name: cloudflare-ddns
  namespace: network
spec:
  schedule: "*/20 * * * *"
  successfulJobsHistoryLimit: 0
  failedJobsHistoryLimit: 1
  concurrencyPolicy: Forbid
  startingDeadlineSeconds: 10
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: Never
          containers:
            - name: cloudflare-ddns
              image: curlimages/curl:7.75.0
              env:
                - name: ZONE_ID
                  valueFrom:
                    secretKeyRef:
                      name: cloudflare
                      key: zone_id
                - name: AUTH_KEY
                  valueFrom:
                    secretKeyRef:
                      name: cloudflare
                      key: auth_key
                - name: RECORD_ID
                  valueFrom:
                    secretKeyRef:
                      name: cloudflare
                      key: wild_record_id
                - name: DOMAIN_NAME
                  valueFrom:
                    secretKeyRef:
                      name: cloudflare
                      key: wild_name
              command:
                - "/bin/sh"
                - "-ec"
                - |
                  set -o nounset
                  set -o errexit

                  IP=$(curl -s ifconfig.co)

                  if host $NAME 1.1.1.1 | grep "has address" | grep "$IP"; then
                    echo "$NAME is currently set to $IP; no changes needed"
                    exit 0
                  else
                    UPDATE=$(curl -X PUT "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records/$RECORD_ID" \
                        -H "Authorization: Bearer $AUTH_KEY" \
                        -H "Content-Type: application/json" \
                        --data "{\"type\":\"A\",\"name\":\"$DOMAIN_NAME\",\"content\":\"$IP\"}")
                  fi

                  if echo "$UPDATE" | grep -q '\"success\":false'; then
                    printf "%s - Yikes - Updating IP Address '%s' has failed" "$(date -u)" "$IP"
                    exit 1
                  else
                    printf "%s - Success - IP Address '%s' has been updated" "$(date -u)" "$IP"
                    exit 0
                  fi
